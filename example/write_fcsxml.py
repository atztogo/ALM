#
#  write_fcsxml.py
#
#  This is an example to run ALM in the suggest mode.
#

from alm import ALM
from alm.fcsxml import Fcsxml
import numpy as np

lavec = [[20.406, 0, 0],
         [0, 20.406, 0],
         [0, 0, 20.406]]
xcoord = [[0.0000000000000000, 0.0000000000000000, 0.0000000000000000],
          [0.0000000000000000, 0.0000000000000000, 0.5000000000000000],
          [0.0000000000000000, 0.2500000000000000, 0.2500000000000000],
          [0.0000000000000000, 0.2500000000000000, 0.7500000000000000],
          [0.0000000000000000, 0.5000000000000000, 0.0000000000000000],
          [0.0000000000000000, 0.5000000000000000, 0.5000000000000000],
          [0.0000000000000000, 0.7500000000000000, 0.2500000000000000],
          [0.0000000000000000, 0.7500000000000000, 0.7500000000000000],
          [0.1250000000000000, 0.1250000000000000, 0.1250000000000000],
          [0.1250000000000000, 0.1250000000000000, 0.6250000000000000],
          [0.1250000000000000, 0.3750000000000000, 0.3750000000000000],
          [0.1250000000000000, 0.3750000000000000, 0.8750000000000000],
          [0.1250000000000000, 0.6250000000000000, 0.1250000000000000],
          [0.1250000000000000, 0.6250000000000000, 0.6250000000000000],
          [0.1250000000000000, 0.8750000000000000, 0.3750000000000000],
          [0.1250000000000000, 0.8750000000000000, 0.8750000000000000],
          [0.2500000000000000, 0.0000000000000000, 0.2500000000000000],
          [0.2500000000000000, 0.0000000000000000, 0.7500000000000000],
          [0.2500000000000000, 0.2500000000000000, 0.0000000000000000],
          [0.2500000000000000, 0.2500000000000000, 0.5000000000000000],
          [0.2500000000000000, 0.5000000000000000, 0.2500000000000000],
          [0.2500000000000000, 0.5000000000000000, 0.7500000000000000],
          [0.2500000000000000, 0.7500000000000000, 0.0000000000000000],
          [0.2500000000000000, 0.7500000000000000, 0.5000000000000000],
          [0.3750000000000000, 0.1250000000000000, 0.3750000000000000],
          [0.3750000000000000, 0.1250000000000000, 0.8750000000000000],
          [0.3750000000000000, 0.3750000000000000, 0.1250000000000000],
          [0.3750000000000000, 0.3750000000000000, 0.6250000000000000],
          [0.3750000000000000, 0.6250000000000000, 0.3750000000000000],
          [0.3750000000000000, 0.6250000000000000, 0.8750000000000000],
          [0.3750000000000000, 0.8750000000000000, 0.1250000000000000],
          [0.3750000000000000, 0.8750000000000000, 0.6250000000000000],
          [0.5000000000000000, 0.0000000000000000, 0.0000000000000000],
          [0.5000000000000000, 0.0000000000000000, 0.5000000000000000],
          [0.5000000000000000, 0.2500000000000000, 0.2500000000000000],
          [0.5000000000000000, 0.2500000000000000, 0.7500000000000000],
          [0.5000000000000000, 0.5000000000000000, 0.0000000000000000],
          [0.5000000000000000, 0.5000000000000000, 0.5000000000000000],
          [0.5000000000000000, 0.7500000000000000, 0.2500000000000000],
          [0.5000000000000000, 0.7500000000000000, 0.7500000000000000],
          [0.6250000000000000, 0.1250000000000000, 0.1250000000000000],
          [0.6250000000000000, 0.1250000000000000, 0.6250000000000000],
          [0.6250000000000000, 0.3750000000000000, 0.3750000000000000],
          [0.6250000000000000, 0.3750000000000000, 0.8750000000000000],
          [0.6250000000000000, 0.6250000000000000, 0.1250000000000000],
          [0.6250000000000000, 0.6250000000000000, 0.6250000000000000],
          [0.6250000000000000, 0.8750000000000000, 0.3750000000000000],
          [0.6250000000000000, 0.8750000000000000, 0.8750000000000000],
          [0.7500000000000000, 0.0000000000000000, 0.2500000000000000],
          [0.7500000000000000, 0.0000000000000000, 0.7500000000000000],
          [0.7500000000000000, 0.2500000000000000, 0.0000000000000000],
          [0.7500000000000000, 0.2500000000000000, 0.5000000000000000],
          [0.7500000000000000, 0.5000000000000000, 0.2500000000000000],
          [0.7500000000000000, 0.5000000000000000, 0.7500000000000000],
          [0.7500000000000000, 0.7500000000000000, 0.0000000000000000],
          [0.7500000000000000, 0.7500000000000000, 0.5000000000000000],
          [0.8750000000000000, 0.1250000000000000, 0.3750000000000000],
          [0.8750000000000000, 0.1250000000000000, 0.8750000000000000],
          [0.8750000000000000, 0.3750000000000000, 0.1250000000000000],
          [0.8750000000000000, 0.3750000000000000, 0.6250000000000000],
          [0.8750000000000000, 0.6250000000000000, 0.3750000000000000],
          [0.8750000000000000, 0.6250000000000000, 0.8750000000000000],
          [0.8750000000000000, 0.8750000000000000, 0.1250000000000000],
          [0.8750000000000000, 0.8750000000000000, 0.6250000000000000]]

kd = [14] * 64

force = np.loadtxt("force.dat").reshape((-1, 64, 3))[:22]
disp = np.loadtxt("disp.dat").reshape((-1, 64, 3))[:22]

fc_values = []
elem_indices = []
fc3_values = []
elem3_indices = []

with ALM(lavec, xcoord, kd) as alm:
    alm.define(2, [-1, 7.3])
    alm.displacements = disp
    alm.forces = force
    info = alm.optimize()
    fc_values, elem_indices = alm.get_fc(1)  # harmonic fc
    fc3_values, elem3_indices = alm.get_fc(2)  # cubic fc
    alm.save_fc(filename="anharmonic.xml", format="alamode")



kd = [14] * 64
obj = Fcsxml(lavec, xcoord, kd)

obj.set_force_constants(fc_values, elem_indices)
obj.set_force_constants(fc3_values, elem3_indices)

# The contents of test.xml should be the same as that of anharmonic.xml
obj.write(filename="test.xml")



