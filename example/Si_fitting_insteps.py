#
#  Si_fitting_insteps.py
#
#  This is an example to run ALM for fitting FC2->FC3 in steps,
#  where the FC2 values are fixed in the second step by using 
#  fc_freeze method.

from alm import ALM
import numpy as np

lavec = [[20.406, 0, 0],
         [0, 20.406, 0],
         [0, 0, 20.406]]
xcoord = [[0.0000000000000000, 0.0000000000000000, 0.0000000000000000],
          [0.0000000000000000, 0.0000000000000000, 0.5000000000000000],
          [0.0000000000000000, 0.2500000000000000, 0.2500000000000000],
          [0.0000000000000000, 0.2500000000000000, 0.7500000000000000],
          [0.0000000000000000, 0.5000000000000000, 0.0000000000000000],
          [0.0000000000000000, 0.5000000000000000, 0.5000000000000000],
          [0.0000000000000000, 0.7500000000000000, 0.2500000000000000],
          [0.0000000000000000, 0.7500000000000000, 0.7500000000000000],
          [0.1250000000000000, 0.1250000000000000, 0.1250000000000000],
          [0.1250000000000000, 0.1250000000000000, 0.6250000000000000],
          [0.1250000000000000, 0.3750000000000000, 0.3750000000000000],
          [0.1250000000000000, 0.3750000000000000, 0.8750000000000000],
          [0.1250000000000000, 0.6250000000000000, 0.1250000000000000],
          [0.1250000000000000, 0.6250000000000000, 0.6250000000000000],
          [0.1250000000000000, 0.8750000000000000, 0.3750000000000000],
          [0.1250000000000000, 0.8750000000000000, 0.8750000000000000],
          [0.2500000000000000, 0.0000000000000000, 0.2500000000000000],
          [0.2500000000000000, 0.0000000000000000, 0.7500000000000000],
          [0.2500000000000000, 0.2500000000000000, 0.0000000000000000],
          [0.2500000000000000, 0.2500000000000000, 0.5000000000000000],
          [0.2500000000000000, 0.5000000000000000, 0.2500000000000000],
          [0.2500000000000000, 0.5000000000000000, 0.7500000000000000],
          [0.2500000000000000, 0.7500000000000000, 0.0000000000000000],
          [0.2500000000000000, 0.7500000000000000, 0.5000000000000000],
          [0.3750000000000000, 0.1250000000000000, 0.3750000000000000],
          [0.3750000000000000, 0.1250000000000000, 0.8750000000000000],
          [0.3750000000000000, 0.3750000000000000, 0.1250000000000000],
          [0.3750000000000000, 0.3750000000000000, 0.6250000000000000],
          [0.3750000000000000, 0.6250000000000000, 0.3750000000000000],
          [0.3750000000000000, 0.6250000000000000, 0.8750000000000000],
          [0.3750000000000000, 0.8750000000000000, 0.1250000000000000],
          [0.3750000000000000, 0.8750000000000000, 0.6250000000000000],
          [0.5000000000000000, 0.0000000000000000, 0.0000000000000000],
          [0.5000000000000000, 0.0000000000000000, 0.5000000000000000],
          [0.5000000000000000, 0.2500000000000000, 0.2500000000000000],
          [0.5000000000000000, 0.2500000000000000, 0.7500000000000000],
          [0.5000000000000000, 0.5000000000000000, 0.0000000000000000],
          [0.5000000000000000, 0.5000000000000000, 0.5000000000000000],
          [0.5000000000000000, 0.7500000000000000, 0.2500000000000000],
          [0.5000000000000000, 0.7500000000000000, 0.7500000000000000],
          [0.6250000000000000, 0.1250000000000000, 0.1250000000000000],
          [0.6250000000000000, 0.1250000000000000, 0.6250000000000000],
          [0.6250000000000000, 0.3750000000000000, 0.3750000000000000],
          [0.6250000000000000, 0.3750000000000000, 0.8750000000000000],
          [0.6250000000000000, 0.6250000000000000, 0.1250000000000000],
          [0.6250000000000000, 0.6250000000000000, 0.6250000000000000],
          [0.6250000000000000, 0.8750000000000000, 0.3750000000000000],
          [0.6250000000000000, 0.8750000000000000, 0.8750000000000000],
          [0.7500000000000000, 0.0000000000000000, 0.2500000000000000],
          [0.7500000000000000, 0.0000000000000000, 0.7500000000000000],
          [0.7500000000000000, 0.2500000000000000, 0.0000000000000000],
          [0.7500000000000000, 0.2500000000000000, 0.5000000000000000],
          [0.7500000000000000, 0.5000000000000000, 0.2500000000000000],
          [0.7500000000000000, 0.5000000000000000, 0.7500000000000000],
          [0.7500000000000000, 0.7500000000000000, 0.0000000000000000],
          [0.7500000000000000, 0.7500000000000000, 0.5000000000000000],
          [0.8750000000000000, 0.1250000000000000, 0.3750000000000000],
          [0.8750000000000000, 0.1250000000000000, 0.8750000000000000],
          [0.8750000000000000, 0.3750000000000000, 0.1250000000000000],
          [0.8750000000000000, 0.3750000000000000, 0.6250000000000000],
          [0.8750000000000000, 0.6250000000000000, 0.3750000000000000],
          [0.8750000000000000, 0.6250000000000000, 0.8750000000000000],
          [0.8750000000000000, 0.8750000000000000, 0.1250000000000000],
          [0.8750000000000000, 0.8750000000000000, 0.6250000000000000]]

kd = [14] * 64

force = np.loadtxt("force.dat").reshape((-1, 64, 3))[[0]]
disp = np.loadtxt("disp.dat").reshape((-1, 64, 3))[[0]]

force3 = np.loadtxt("force.dat").reshape((-1, 64, 3))[1:22]
disp3 = np.loadtxt("disp.dat").reshape((-1, 64, 3))[1:22]

# alm.alm_new() and alm.alm_delete() are done by 'with' statement
with ALM(lavec, xcoord, kd) as alm:
    alm.set_verbosity(0)

    # Harmonic model
    alm.define(1, [-1], symmetrization_basis="Cartesian")
    alm.displacements = disp
    alm.forces = force
    info = alm.optimize()
    fc2_values, elem2_indices = alm.get_fc(1)  # harmonic fc
    alm.save_fc('harmonic.xml', format='alamode')

    # Third-order model
    alm.define(2, [-1, 7.6], symmetrization_basis="Cartesian")
    alm.displacements = disp3
    alm.forces = force3
    #alm.set_constraint(translation=True, rotation=False)

    # Fix FC2 to the previously calculated values
    alm.freeze_fc(fc2_values, elem2_indices)

    info = alm.optimize()
    fc3_values, elem3_indices = alm.get_fc(2)
    alm.save_fc('anharmonic2.xml', format='alamode')

    #alm.freeze_fc(fc3_values, elem3_indices)
    #info = alm.optimize()
    #alm.save_fc('anharmonic2_rep.xml', format='alamode')



